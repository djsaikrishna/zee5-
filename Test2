import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.util.Scanner;

public class RemoveRepeatingTag {
    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
        System.out.print("Enter folder path containing XMLs: ");
        String folderPath = scanner.nextLine();
        // Automatically detect repeating tags
        String tagName = null;
        }

        File folder = new File(folderPath);
        File[] files = folder.listFiles((dir, name) -> name.endsWith(".xml"));

        if (files == null || files.length == 0) {
            System.out.println("No XML files found in the specified folder.");
            return;
        }

        for (File file : files) {
            try {
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(file);
                doc.getDocumentElement().normalize();

                // Detect all tags
                NodeList allTags = doc.getDocumentElement().getChildNodes();
                for (int i = 0; i < allTags.getLength(); i++) {
                    Node node = allTags.item(i);
                    if (node.getNodeType() == Node.ELEMENT_NODE) {
                        String currentTag = node.getNodeName();
                        int count = 0;
                        Node toRemove = null;
                        NodeList nodeList = doc.getElementsByTagName(currentTag);
                        if (nodeList.getLength() > 1) {  // If more than one occurrence
                            toRemove = nodeList.item(0);  // Remove the first occurrence
                        }
                        if (toRemove != null) {
                            toRemove.getParentNode().removeChild(toRemove);
                            System.out.println("Removed one occurrence of <" + currentTag + "> from " + file.getName());
                        }
                    }
                }  // If more than one occurrence
                    

                    // Save updated XML
                    TransformerFactory transformerFactory = TransformerFactory.newInstance();
                    Transformer transformer = transformerFactory.newTransformer();
                    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                    DOMSource source = new DOMSource(doc);
                    StreamResult result = new StreamResult(file);
                    transformer.transform(source, result);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        System.out.println("Processing complete.");
    }
}
