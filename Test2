import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.util.Scanner;

public class RemoveRepeatingTag {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the major folder path: ");
        String majorFolderPath = scanner.nextLine();
        System.out.print("Enter the tag name to remove: ");
        String tagName = scanner.nextLine();
        scanner.close();

        File majorFolder = new File(majorFolderPath);
        if (!majorFolder.isDirectory()) {
            System.out.println("Invalid folder path.");
            return;
        }

        processFolder(majorFolder, tagName);
        System.out.println("All processing complete.");
    }

    public static void processFolder(File folder, String tagName) {
        File[] filesAndDirs = folder.listFiles();
        if (filesAndDirs == null) return;

        for (File file : filesAndDirs) {
            if (file.isDirectory()) {
                processFolder(file, tagName); // Recursively process subfolders
            } else if (file.isFile() && file.getName().endsWith(".xml")) {
                try {
                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                    Document doc = dBuilder.parse(file);
                    doc.getDocumentElement().normalize();

                    NodeList nodeList = doc.getElementsByTagName(tagName);
                    if (nodeList.getLength() > 1) {
                        for (int i = nodeList.getLength() - 1; i > 0; i--) {
                            Node toRemove = nodeList.item(i);
                            toRemove.getParentNode().removeChild(toRemove);
                            System.out.println("Removed one occurrence of <" + tagName + "> from " + file.getName());
                        }
                    }

                    TransformerFactory transformerFactory = TransformerFactory.newInstance();
                    Transformer transformer = transformerFactory.newTransformer();
                    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                    DOMSource source = new DOMSource(doc);
                    StreamResult result = new StreamResult(file);
                    transformer.transform(source, result);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
