import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.*;
import java.util.*;

public class XMLProcessor {
    public static void main(String[] args) {
        String inputFolderPath = "input_xmls";  // Folder containing XML files
        String outputBasePath = "output_xmls";  // Base output folder

        Set<String> specialStates = Set.of("Florida", "New York", "Pennsylvania");

        // CLAIM_LOB values for Florida
        List<String> floridaLobs = List.of(
            "PERSONAL AUTOMOBILE",
            "COMMERCIAL AUTOMOBILE",
            "RESIDENTIAL PROPERTY",
            "COMMERCIAL PROPERTY",
            "VALUABLE ARTICLES"
        );

        // CLAIM_LOB values for New York & Pennsylvania
        List<String> nyPaLobs = List.of("PERSONAL AUTOMOBILE", "COMMERCIAL AUTOMOBILE");

        // Default CLAIM_LOB for other states
        String defaultClaimLob = "GENERAL INSURANCE";

        // Create output base folder if it doesnâ€™t exist
        File baseOutputFolder = new File(outputBasePath);
        if (!baseOutputFolder.exists()) {
            baseOutputFolder.mkdirs();
        }

        File inputFolder = new File(inputFolderPath);
        File[] xmlFiles = inputFolder.listFiles((dir, name) -> name.toLowerCase().endsWith(".xml"));

        if (xmlFiles == null || xmlFiles.length == 0) {
            System.out.println("No XML files found in " + inputFolderPath);
            return;
        }

        int globalTcCounter = 1; // Global Test Case Counter

        for (File xmlFile : xmlFiles) {
            globalTcCounter = processXMLFile(xmlFile, outputBasePath, specialStates, floridaLobs, nyPaLobs, defaultClaimLob, globalTcCounter);
        }

        System.out.println("XML processing completed!");
    }

    public static int processXMLFile(File xmlFile, String outputBasePath, Set<String> specialStates,
                                     List<String> floridaLobs, List<String> nyPaLobs, String defaultClaimLob, int globalTcCounter) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(xmlFile);
            doc.getDocumentElement().normalize();

            NodeList stateNodes = doc.getElementsByTagName("CLAIM_LOSS_STATE");
            if (stateNodes.getLength() == 0) {
                System.out.println("Skipping file (No CLAIM_LOSS_STATE found): " + xmlFile.getName());
                return globalTcCounter;
            }
            String claimLossState = stateNodes.item(0).getTextContent().trim();

            String baseFileName = xmlFile.getName().replaceFirst("[.][^.]+$", "");
            String outputFolderPath = outputBasePath + "/" + baseFileName;
            File outputFolder = new File(outputFolderPath);
            if (!outputFolder.exists()) {
                outputFolder.mkdirs();
            }

            if (claimLossState.equals("Florida")) {
                for (String claimLob : floridaLobs) {
                    globalTcCounter = generateXML(xmlFile, outputFolderPath, baseFileName, claimLossState, claimLob, globalTcCounter);
                }
            } else if (claimLossState.equals("New York") || claimLossState.equals("Pennsylvania")) {
                for (String claimLob : nyPaLobs) {
                    globalTcCounter = generateXML(xmlFile, outputFolderPath, baseFileName, claimLossState, claimLob, globalTcCounter);
                }
                // One extra scenario for any other CLAIM_LOB
                globalTcCounter = generateXML(xmlFile, outputFolderPath, baseFileName, claimLossState, "OTHER", globalTcCounter);
            } else {
                globalTcCounter = generateXML(xmlFile, outputFolderPath, baseFileName, claimLossState, defaultClaimLob, globalTcCounter);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return globalTcCounter;
    }

    public static int generateXML(File inputFile, String outputFolderPath, String baseFileName, 
                                  String claimLossState, String claimLob, int globalTcCounter) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(inputFile);
            doc.getDocumentElement().normalize();

            updateXMLTagValue(doc, "CLAIM_LOSS_STATE", claimLossState);
            updateXMLTagValue(doc, "CLAIM_LOB", claimLob);

            String outputFileName = claimLob.equals("OTHER") ?
                    String.format("%s_TC%02d_%s.xml", baseFileName, globalTcCounter++, claimLossState) :
                    String.format("%s_TC%02d_%s_%s.xml", baseFileName, globalTcCounter++, claimLossState, claimLob.replace(" ", "_"));

            String outputPath = outputFolderPath + "/" + outputFileName;

            saveXMLFile(doc, outputPath);
            System.out.println("Generated: " + outputPath);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return globalTcCounter;
    }

    public static void updateXMLTagValue(Document doc, String tagName, String newValue) {
        NodeList nodeList = doc.getElementsByTagName(tagName);
        if (nodeList.getLength() == 0) {
            System.out.println("Tag <" + tagName + "> not found.");
            return;
        }

        for (int i = 0; i < nodeList.getLength(); i++) {
            Node node = nodeList.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                node.setTextContent(newValue);
            }
        }
    }

    public static void saveXMLFile(Document doc, String filePath) {
        try {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(filePath));
            transformer.transform(source, result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
