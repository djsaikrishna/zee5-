import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.*;
import java.util.*;

public class XMLProcessor {
    public static void main(String[] args) {
        String inputFolderPath = "input_xmls";  // Folder containing input XMLs
        String outputBasePath = "output_xmls";  // Base output folder

        // Predefined list of states
        List<String> claimLossStates = List.of("Florida", "New York", "Pennsylvania", "Texas", "California");

        // Special states with multiple LOBs
        Map<String, List<String>> specialStatesLobs = Map.of(
            "Florida", List.of("PERSONAL AUTOMOBILE", "COMMERCIAL AUTOMOBILE", "RESIDENTIAL PROPERTY", "COMMERCIAL PROPERTY", "VALUABLE ARTICLES"),
            "New York", List.of("PERSONAL AUTOMOBILE", "COMMERCIAL AUTOMOBILE", "OTHER"),
            "Pennsylvania", List.of("PERSONAL AUTOMOBILE", "COMMERCIAL AUTOMOBILE", "OTHER")
        );

        // States that require RECIPIENT modification and their respective values
        Map<String, String> recipientUpdates = Map.of(
            "Florida", "FL_Recipient",
            "New York", "NY_Recipient",
            "California", "CA_Recipient"
        );

        File inputFolder = new File(inputFolderPath);
        File[] xmlFiles = inputFolder.listFiles((dir, name) -> name.toLowerCase().endsWith(".xml"));

        if (xmlFiles == null || xmlFiles.length == 0) {
            System.out.println("No XML files found in " + inputFolderPath);
            return;
        }

        for (File xmlFile : xmlFiles) {
            processXMLFile(xmlFile, outputBasePath, claimLossStates, specialStatesLobs, recipientUpdates);
        }

        System.out.println("XML processing completed!");
    }

    public static void processXMLFile(File xmlFile, String outputBasePath, List<String> claimLossStates, Map<String, List<String>> specialStatesLobs, Map<String, String> recipientUpdates) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(xmlFile);
            doc.getDocumentElement().normalize();

            String baseFileName = xmlFile.getName().replaceFirst("[.][^.]+$", "");
            String outputFolderPath = outputBasePath + "/" + baseFileName;
            File outputFolder = new File(outputFolderPath);
            if (!outputFolder.exists()) {
                outputFolder.mkdirs();
            }

            int tcCounter = 1; // Reset counter for each input file

            for (String state : claimLossStates) {
                if (specialStatesLobs.containsKey(state)) {
                    for (String claimLob : specialStatesLobs.get(state)) {
                        tcCounter = generateXML(xmlFile, outputFolderPath, baseFileName, state, claimLob, recipientUpdates, tcCounter);
                    }
                } else {
                    tcCounter = generateXML(xmlFile, outputFolderPath, baseFileName, state, null, recipientUpdates, tcCounter);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static int generateXML(File inputFile, String outputFolderPath, String baseFileName, String claimLossState, String claimLob, Map<String, String> recipientUpdates, int tcCounter) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(inputFile);
            doc.getDocumentElement().normalize();

            updateXMLTagValue(doc, "CLAIM_LOSS_STATE", claimLossState);
            if (claimLob != null) {
                updateXMLTagValue(doc, "CLAIM_LOB", claimLob);
            }

            // Update RECIPIENT only for predefined states
            if (recipientUpdates.containsKey(claimLossState)) {
                updateXMLTagValue(doc, "RECIPIENT", recipientUpdates.get(claimLossState));
            }

            String outputFileName = (claimLob == null) ?
                    String.format("%s_TC%02d_%s.xml", baseFileName, tcCounter++, claimLossState) :
                    String.format("%s_TC%02d_%s_%s.xml", baseFileName, tcCounter++, claimLossState, claimLob.replace(" ", "_"));

            String outputPath = outputFolderPath + "/" + outputFileName;

            saveXMLFile(doc, outputPath);
            System.out.println("Generated: " + outputPath);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tcCounter;
    }

    public static void updateXMLTagValue(Document doc, String tagName, String newValue) {
        NodeList nodeList = doc.getElementsByTagName(tagName);
        if (nodeList.getLength() == 0) {
            return;
        }

        for (int i = 0; i < nodeList.getLength(); i++) {
            Node node = nodeList.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                node.setTextContent(newValue);
            }
        }
    }

    public static void saveXMLFile(Document doc, String filePath) {
        try {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(filePath));
            transformer.transform(source, result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
